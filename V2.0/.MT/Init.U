?Cppsym:: list of known cpp symbols, sorted alphabetically
?Cppsym:al="AMIX BIT_MSF BSD BSD4_3 BSD_NET2 CMU CRAY DGUX DOLPHIN DPX2"
?Cppsym:al="$al GO32 GOULD_PN HP700 I386 I80960 I960 Lynx M68000 M68K MACH"
?Cppsym:al="$al MIPSEB MIPSEL MSDOS MTXINU MULTIMAX MVS"
?Cppsym:al="$al M_COFF M_I186 M_I286 M_I386 M_I8086 M_I86 M_I86SM"
?Cppsym:al="$al M_SYS3 M_SYS5 M_SYSIII M_SYSV M_UNIX M_XENIX"
?Cppsym:al="$al NeXT OCS88 OSF1 PARISC PC532 PORTAR POSIX"
?Cppsym:al="$al PWB R3000 RES RISC6000 RT Sun386i SVR3 SVR4"
?Cppsym:al="$al SYSTYPE_BSD SYSTYPE_SVR4 SYSTYPE_SYSV Tek4132 Tek4300"
?Cppsym:al="$al UMAXV USGr4 USGr4_2 UTEK UTS UTek UnicomPBB UnicomPBD Utek"
?Cppsym:al="$al VMS Xenix286"
?Cppsym:al="$al _AIX _AIX32 _AIX370 _AM29000 _COFF _CRAY _CX_UX _EPI"
?Cppsym:al="$al _IBMESA _IBMR2 _M88K _M88KBCS_TARGET"
?Cppsym:al="$al _MIPSEB _MIPSEL _M_COFF _M_I86 _M_I86SM _M_SYS3"
?Cppsym:al="$al _M_SYS5 _M_SYSIII _M_SYSV _M_UNIX _M_XENIX _NLS _PGC_ _R3000"
?Cppsym:al="$al _SYSTYPE_BSD _SYSTYPE_BSD43 _SYSTYPE_SVR4"
?Cppsym:al="$al _SYSTYPE_SYSV _SYSV3 _U370 _UNICOS"
?Cppsym:al="$al __386BSD__ __BIG_ENDIAN __BIG_ENDIAN__ __BSD_4_4__"
?Cppsym:al="$al __DGUX__ __DPX2__ __H3050R __H3050RX"
?Cppsym:al="$al __LITTLE_ENDIAN __LITTLE_ENDIAN__ __MACH__"
?Cppsym:al="$al __MIPSEB __MIPSEB__ __MIPSEL __MIPSEL__"
?Cppsym:al="$al __Next__ __OSF1__ __PARAGON__ __PGC__ __PWB __STDC__"
?Cppsym:al="$al __SVR4_2__ __UMAXV__"
?Cppsym:al="$al ____386BSD____ __alpha __alpha__ __amiga"
?Cppsym:al="$al __bsd4_2 __bsd4_2__ __bsdi__ __convex__"
?Cppsym:al="$al __host_mips__"
?Cppsym:al="$al __hp9000s200 __hp9000s300 __hp9000s400 __hp9000s500"
?Cppsym:al="$al __hp9000s500 __hp9000s700 __hp9000s800"
?Cppsym:al="$al __hppa __hpux __hp_osf __i286 __i286__ __i386 __i386__"
?Cppsym:al="$al __i486 __i486__ __i860 __i860__ __ibmesa __ksr1__ __linux__"
?Cppsym:al="$al __m68k __m68k__ __m88100__ __m88k __m88k__"
?Cppsym:al="$al __mc68000 __mc68000__ __mc68020 __mc68020__"
?Cppsym:al="$al __mc68030 __mc68030__ __mc68040 __mc68040__"
?Cppsym:al="$al __mc88100 __mc88100__ __mips __mips__"
?Cppsym:al="$al __motorola__ __osf__ __pa_risc __sparc__ __stdc__"
?Cppsym:al="$al __sun __sun__ __svr3__ __svr4__ __ultrix __ultrix__"
?Cppsym:al="$al __unix __unix__ __uxpm__ __uxps__ __vax __vax__"
?Cppsym:al="$al _host_mips _mips _unix"
?Cppsym:al="$al a29k aegis aix aixpc alliant alpha am29000 amiga ansi ardent"
?Cppsym:al="$al apollo ardent att386 att3b"
?Cppsym:al="$al bsd bsd43 bsd4_2 bsd4_3 bsd4_4 bsdi bull"
?Cppsym:al="$al cadmus clipper concurrent convex cray ctix"
?Cppsym:al="$al dmert encore gcos gcx gimpel gould"
?Cppsym:al="$al hbullx20 hcx host_mips hp200 hp300 hp700 hp800"
?Cppsym:al="$al hp9000 hp9000s300 hp9000s400 hp9000s500"
?Cppsym:al="$al hp9000s700 hp9000s800 hp9k8 hppa hpux"
?Cppsym:al="$al i186 i286 i386 i486 i8086"
?Cppsym:al="$al i80960 i860 iAPX286 ibm ibm032 ibmrt interdata is68k"
?Cppsym:al="$al ksr1 linux luna luna88k m68k m88100 m88k"
?Cppsym:al="$al mc300 mc500 mc68000 mc68010 mc68020 mc68030"
?Cppsym:al="$al mc68040 mc68060 mc68k mc68k32 mc700"
?Cppsym:al="$al mc88000 mc88100 merlin mert mips mvs n16"
?Cppsym:al="$al ncl_el ncl_mr"
?Cppsym:al="$al news1500 news1700 news1800 news1900 news3700"
?Cppsym:al="$al news700 news800 news900 ns16000 ns32000"
?Cppsym:al="$al ns32016 ns32332 ns32k nsc32000 os osf"
?Cppsym:al="$al parisc pc532 pdp11 plexus posix pyr"
?Cppsym:al="$al riscix riscos scs sequent sgi sinix sony sony_news"
?Cppsym:al="$al sonyrisc sparc sparclite spectrum stardent stratos"
?Cppsym:al="$al sun sun3 sun386 svr4 sysV68 sysV88"
?Cppsym:al="$al titan tower tower32 tower32_200 tower32_600 tower32_700"
?Cppsym:al="$al tower32_800 tower32_850 tss u370 u3b u3b2 u3b20 u3b200"
?Cppsym:al="$al u3b20d u3b5 ultrix unix unixpc unos vax venix vms"
?Cppsym:al="$al xenix z8000"
?Cppsym:
?Unix:: No trailing extension on UNIX executables
?Unix:_exe='' 
?Unix:: Extra object files, if any, needed on this platform.
?Unix:archobjs=''
@if !bin
%bin:bin='/usr/local/bin'
@define bin
@end
@if !cc
%cc:cc='cc'
@define cc
@end
@if !gccversion
%gccversion:gccversion=''
@define gccversion
@end
?d_NeWS:: default path for NeWS
?d_NeWS:d_newshome="/usr/NeWS"
?d_NeWS:
@if !d_portable
%d_portable:d_portable=''
@define d_portable
@end
@if !d_sysernlst
%d_sysernlst:d_sysernlst=''
@define d_sysernlst
@end
?errnolist:errnolist=errnolist
?groupstype:groupstype=''
@if !i_sysfile
%i_sysfile:i_sysfile=''
@define i_sysfile
@end
@if !i_sysselct
%i_sysselct:i_sysselct=''
@define i_sysselct
@end
@if !i_whoami
%i_whoami:i_whoami=''
@define i_whoami
@end
?ipc:serve_shm=''
?ipc:serve_msg="$undef"
?ipc:serve_inet_udp=''
?ipc:serve_inet_tcp=''
?ipc:serve_unix_udp=''
?ipc:serve_unix_tcp=''
?libpth:: change the next line if compiling for Xenix/286 on Xenix/386
?libpth:xlibpth='/usr/lib/386 /lib/386'
?libpth:
?libpth:: Possible local library directories to search.
?libpth:loclibpth="/usr/local/lib /opt/local/lib /usr/gnu/lib"
?libpth:loclibpth="$loclibpth /opt/gnu/lib /usr/GNU/lib /opt/GNU/lib"
?libpth:
?libpth:: general looking path for locating libraries
?libpth:glibpth="/shlib /usr/shlib /lib/pa1.1 /usr/lib/large"
?libpth:glibpth="$glibpth /lib /usr/lib $xlibpth"
?libpth:glibpth="$glibpth /lib/large /usr/lib/small /lib/small"
?libpth:glibpth="$glibpth /usr/ccs/lib /usr/ucblib /usr/local/lib"
?libpth:
?libpth:: Private path used by Configure to find libraries.  Its value
?libpth:: is prepended to libpth. This variable takes care of special
?libpth:: machines, like the mips.  Usually, it should be empty.
?libpth:plibpth=''
?libpth:
@if !libs
%libs:libs=''
@define libs
@end
?libs:: default library list
?libs:libswanted=''
?mboxchar:CTRLA=`echo a | tr a '\001'`
@if !large
%large:large=''
@define large
@end
@if !usrinc
%usrinc:usrinc='/usr/include'
@define usrinc
@end
?voidflags:: full support for void wanted by default
?voidflags:defvoidused=15
?voidflags:
@if !cppflags
%cppflags:cppflags=''
@define cppflags
@end
@if !ccflags
%ccflags:ccflags=''
@define ccflags
@end
@if !cc_osflags
%cc_osflags:cc_osflags=''
@define cc_osflags
@end
@if !cc_dbflags
%cc_dbflags:cc_dbflags=''
@define cc_dbflags
@end
@if !ldflags
%ldflags:ldflags=''
@define ldflags
@end
?ccflags:: no include file wanted by default
?ccflags:inclwanted=''
?ccflags:
