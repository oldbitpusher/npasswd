head	1.33;
access;
symbols;
locks; strict;
comment	@ * @;


1.33
date	2002.10.02.15.49.16;	author clyde;	state Exp;
branches;
next	1.32;

1.32
date	98.10.13.00.00.00;	author clyde;	state Exp;
branches;
next	1.31;

1.31
date	98.09.16.00.00.00;	author clyde;	state Exp;
branches;
next	1.30;

1.30
date	98.08.17.00.00.00;	author clyde;	state Exp;
branches;
next	1.29;

1.29
date	98.07.17.00.00.00;	author clyde;	state Exp;
branches;
next	1.28;

1.28
date	98.07.09.00.00.00;	author clyde;	state Exp;
branches;
next	1.27;

1.27
date	98.07.09.00.00.00;	author clyde;	state Exp;
branches;
next	1.26;

1.26
date	98.07.01.00.00.00;	author clyde;	state Exp;
branches;
next	1.25;

1.25
date	98.07.01.00.00.00;	author clyde;	state Exp;
branches;
next	1.24;

1.24
date	98.07.01.00.00.00;	author clyde;	state Exp;
branches;
next	1.23;

1.23
date	98.06.30.00.00.00;	author clyde;	state Exp;
branches;
next	1.22;

1.22
date	98.06.30.00.00.00;	author clyde;	state Exp;
branches;
next	1.21;

1.21
date	98.06.26.00.00.00;	author clyde;	state Exp;
branches;
next	1.20;

1.20
date	98.06.23.00.00.00;	author clyde;	state Exp;
branches;
next	1.19;

1.19
date	98.04.21.00.00.00;	author clyde;	state Exp;
branches;
next	1.18;

1.18
date	98.03.26.00.00.00;	author clyde;	state Exp;
branches;
next	1.17;

1.17
date	97.10.29.00.00.00;	author clyde;	state Exp;
branches;
next	1.16;

1.16
date	97.05.23.00.00.00;	author clyde;	state Exp;
branches;
next	1.15;

1.15
date	96.08.15.00.00.00;	author clyde;	state Exp;
branches;
next	1.14;

1.14
date	96.08.14.00.00.00;	author clyde;	state Exp;
branches;
next	1.13;

1.13
date	96.08.13.00.00.00;	author clyde;	state Exp;
branches;
next	1.12;

1.12
date	96.08.09.00.00.00;	author clyde;	state Exp;
branches;
next	1.11;

1.11
date	96.08.06.00.00.00;	author clyde;	state Exp;
branches;
next	1.10;

1.10
date	96.03.29.00.00.00;	author clyde;	state Exp;
branches;
next	1.9;

1.9
date	96.03.27.00.00.00;	author clyde;	state Exp;
branches;
next	1.8;

1.8
date	96.03.27.00.00.00;	author clyde;	state Exp;
branches;
next	1.7;

1.7
date	95.04.05.00.00.00;	author clyde;	state Exp;
branches;
next	1.6;

1.6
date	94.07.28.00.00.00;	author clyde;	state Exp;
branches;
next	1.5;

1.5
date	94.06.20.00.00.00;	author clyde;	state Exp;
branches;
next	1.4;

1.4
date	94.03.31.00.00.00;	author clyde;	state Exp;
branches;
next	1.3;

1.3
date	94.03.15.00.00.00;	author clyde;	state Exp;
branches;
next	1.2;

1.2
date	94.03.15.00.00.00;	author clyde;	state Exp;
branches;
next	1.1;

1.1
date	94.03.01.00.00.00;	author clyde;	state Exp;
branches;
next	;


desc
@@


1.33
log
@Put under GPL
@
text
@/*
 * Copyright (C) 2002  The University of Texas at Austin ("U. T. Austin").
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 *  Contact: npasswd-support@@www.utexas.edu
 *
 */

/*
 * configure
 *	Process the npasswd configuration file.
 *	Many of directives are passed to the pasword check library
 *	configuration routine.
 *
 * Exported routines
 *	configure()
 * Imported variables
 *	See below
 */

#ifndef lint
static char sccsid[] = "$Id: configure.c,v 1.32 1998/10/13 00:00:00 clyde Exp clyde $ (cc.utexas.edu) %P%";
#endif

#include "npasswd.h"
#include "checkpassword.h"

extern char	*Passwd_Help;		/* From passwd.c */
extern char	*Passwd_Motd;		/* From passwd.c */

extern char	*Chsh_Help;		/* From chsh.c */
extern char	*Chsh_Motd;		/* From chsh.c */
extern char	*Chsh_Shells;		/* From chsh.c */

extern char	*Chfn_Help;		/* From chfn.c */
extern char	*Chfn_Motd;		/* From chfn.c */

extern int	PasswdMatchTries;	/* From getpass.c */
extern int	PasswdMatchWait;	/* From getpass.c */
extern int	PasswdTolerance;	/* From pwm_local.c */
extern int	ShadowTolerance;	/* From active shadow module */

#define	PWCHECK_PASSTHRU	'p'	/* Pass to checkpasswd_configure() */
/*
 * Configuration table
 */
struct cftab {
        char	*keyword;	/* String to match */
	int	code;		/* Entry code */
	enum _cftdt {		/* Data type required */
		BOOLEAN, INT, STRING, PATH, NONE
	} datatype;
	void	*where;		/* Where to put the stuff */
};

/*
 * The master configuration table.
 * I'm using a brute-force method for this, but since there are
 * few directives, so brutal-but-simple wins.
 */
private struct cftab cftab[] = {
	/* Global configuration */
	{ "PasswdTolerance",	0,	INT,	(void *)&PasswdTolerance },
	{ "ShadowTolerance",	0,	INT,	(void *)&ShadowTolerance },
	{ "MatchTries",		0,	INT,	(void *)&PasswdMatchTries },
	{ "MatchWait",		0,	INT,	(void *)&PasswdMatchWait },

	/* Configuration for checkpassword() */
	{ "passwd.Dictionaries",	PWCHECK_PASSTHRU,	NONE },
	{ "passwd.SingleCase",		PWCHECK_PASSTHRU,	NONE },
	{ "passwd.AlphaOnly",		PWCHECK_PASSTHRU,	NONE },
	{ "passwd.MinPassword",		PWCHECK_PASSTHRU,	NONE },
	{ "passwd.MaxPassword",		PWCHECK_PASSTHRU,	NONE },
	{ "passwd.MaxRepeat",		PWCHECK_PASSTHRU,	NONE },
	{ "passwd.LengthWarn",		PWCHECK_PASSTHRU,	NONE },
	{ "passwd.PrintableOnly",	PWCHECK_PASSTHRU,	NONE },
	{ "passwd.WhiteSpace",		PWCHECK_PASSTHRU,	NONE },
	{ "passwd.DisallowedChars",	PWCHECK_PASSTHRU,	NONE },
	{ "passwd.CharClasses",		PWCHECK_PASSTHRU,	NONE },
	{ "passwd.PasswordChecks",	PWCHECK_PASSTHRU,	NONE },
	{ "passwd.History",		PWCHECK_PASSTHRU,	NONE },

	/* Configuration for 'passwd' module */
	{ "passwd.Help",  	0, PATH,	(void *)&Passwd_Help },
	{ "passwd.Message",  	0, PATH,	(void *)&Passwd_Motd },

	/* Configurationf for 'chsh' module */
	{ "chsh.Help",  	0, PATH,	(void *)&Chsh_Help },
	{ "chsh.Message",  	0, PATH,	(void *)&Chsh_Motd },
	{ "chsh.Shells",	0, PATH,	(void *)&Chsh_Shells },

	/* Configurationf for 'chfn' module */
	{ "chfn.Help",  	0, PATH,	(void *)&Chfn_Help },
	{ "chfn.Message",  	0, PATH,	(void *)&Chfn_Motd },
	{ 0 },
};

/*
 * dump_config
 *	Print confiuration table
 */
private void
dump_config(vflag)
	int vflag;		/* Verbose flag */
{
	struct cftab	*f;

	for (f = cftab; f->keyword; f++) {
		switch(f->datatype) {
		case NONE:
			if (vflag == 0)
				break;
			printf("%-20s code=%-5d type=%-5d ",
				f->keyword, f->code, f->datatype);
			if (f->code == PWCHECK_PASSTHRU)
				printf("passthru ");
			if (f->where)
				printf("loc=%0x", f->where);
			printf("\n");
			break;
		case INT:
			if (vflag)
				printf("%-20s code=%-5d type=%d loc=%0x data=%0x\n",
					f->keyword, f->code, f->datatype,
					f->where, *((int *)f->where));
			else
				printf("%-20s %d\n", f->keyword,
					*((int *)f->where));
			break;

		case PATH:
			if (vflag)
				printf("%-20s code=%-5d type=%d loc=%0x data=%0x\n",
					f->keyword, f->code, f->datatype,
					f->where, *((char **)f->where));
			else
				printf("%-20s %s\n", f->keyword,
					*((char **)f->where));
			break;
		}
	}
}

/*
 * config
 *	Read validation configuration file and stash away.
 *
 * Usage
 *	configure(char *config-file-name, int secure-check);
 * Error exits
 *	Syntax error or unknown directive encountered
 */
public void
configure(cfn, secure)
	char	*cfn;		/* Config file name */
	int	secure;		/* Do security checks */	
{
	char	cfline[TMPBUFSIZ]; /* Input buffer */
	FILE	*cf;		/* Config file pointer */
	char	*t;		/* Temp */
	int	lineno = 0;	/* Config file line number */
	struct stat cfstat;

	if (lstat(cfn, &cfstat) < 0)
		die("Cannot find configuration file \"%s\"\n", cfn);
#if	(CDEBUG < CDEBUG_SYSTEM)
	/*
	 * Security checks:
	 *   File cannot be world-writable
	 *   File cannot be a symlink (too many race condition scenarios)
	 *   File must be owned by the effective uid
	 */
	if (secure == 0) {
		Uid_t	euid = geteuid();

		if (cfstat.st_uid != euid)
			die("Configuration file \"%s\" not owned by uid %d\n",
				cfn, euid);
#ifdef	S_IWOTH
		if (cfstat.st_mode & S_IWOTH)
#else
		if (cfstat.st_mode & 02)
#endif
			die("Configuration file \"%s\" is writable\n", cfn);
		if ((cfstat.st_mode & S_IFLNK) == S_IFLNK) 
			die("Configuration file \"%s\" is a symlink\n", cfn);
	}
#endif
	if ((cf = fopen(cfn, "r")) == NULL) {
		perror(cfn);
		die("Cannot open configuration file \"%s\"\n", cfn);
	}
	if (get_debug() >= DB_CONFIG) {
		printf("\nBefore reading config file \"%s\"\n", cfn);
		dump_config(1);
	}
	checkpassword_init();
	while (fgets(cfline, sizeof(cfline), cf)) {
		struct cftab *cfi;	/* Table lookup temp */
		int	ok,		/* Temp */
			itemp;		/* Temp */
		char	**cfv;		/* Tokenized cfline */

		lineno++;
		if (cfline[0] == '#' || cfline[0] == '\n' || cfline[0] == '\0')
			continue;
		chop_nl(cfline);
		if ((cfv = split(cfline, 0, 0, '#')) == 0)
			continue;
		debug(DB_CONFIG, "[%d] %s\n", lineno, cfline);
		ok = 0;
		for (cfi = cftab; cfi->keyword; cfi++) {
			if (strcasecmp(cfv[0], cfi->keyword) == 0) {
				ok++;
				break;
			}
		}
		if (ok == 0) {
#if	(DEBUG <= CDEBUG_SYSTEM)
			warn("File '%s' line %d: Unrecognized directive\n",
				cfn, lineno);
			continue;
#else
			die("File '%s' line %d: Unrecognized directive\n", cfn, lineno);
#endif
		}
		switch (cfi->datatype) {
		case NONE:
			if (cfi->code == PWCHECK_PASSTHRU) {
				char	*rc;

				if (rc = checkpassword_configure(cfline, 1))
					die("Line %d: Error %s\n", lineno, rc);
				break;
			}
			die("Line %d: Internal error (NONE)\n", lineno);
			break;

		case BOOLEAN:
			if (cfv[1] && *cfv[1])
				itemp = decode_boolean(cfv[1]);
			else
				die("Line %d: Missing argument\n", lineno);
			*((int *)cfi->where) = itemp;
			break;

		case INT:
			if (cfv[1] && *cfv[1])
				itemp = decode_int(cfv[1]);
			else
				die("Line %d: Missing count\n", lineno);
			*((int *)cfi->where) = itemp;
			break;

		case PATH:
			if (!cfv[1] || *cfv[1] != '/')
				die("Line %d: Missing argument\n", lineno);
			*((char **)cfi->where)= strdup(cfv[1]);
			break;

		case STRING:
			if (cfv[1])
				*((char **)cfi->where) = strdup(cfv[1]);
			else
				die("Line %d: Missing argument\n", lineno);
			break;

		default:
			warn("Line %d: Internal error (UNKNOWN)\n", cfline);
			break;
		}
	}
	(void) fclose(cf);
	if (get_debug() >= DB_CONFIG) {
		printf("\nAfter reading config file\n");
		dump_config(1);
	}
	if (t = checkpassword_verify())
		logdie(t);
	if (XSwitches[Xsw_ShowConfig]) {
		dump_config(0);
		checkpassword_probe("passwd.");
		exit(0);
	}
}
/* End $RCSfile: configure.c,v $ */
@


1.32
log
@Make passwd.MaxRepeat work
@
text
@d2 1
a2 2
 * Copyright 1998, The University of Texas at Austin ("U. T. Austin").
 * All rights reserved.
d4 4
a7 2
 * By using this software the USER indicates that he or she has read,
 * understood and will comply with the following:
d9 4
a12 3
 * U. T. Austin hereby grants USER permission to use, copy, modify, and
 * distribute this software and its documentation for any purpose and
 * without fee, provided that:
d14 6
a19 31
 * 1. the above copyright notice appears in all copies of the software
 *    and its documentation, or portions thereof, and 
 * 2. a full copy of this notice is included with the software and its
 *    documentation, or portions thereof, and 
 * 3. neither the software nor its documentation, nor portions thereof,
 *    is sold for profit. Any commercial sale or license of this software,
 *    copies of the software, its associated documentation and/or
 *    modifications of either is strictly prohibited without the prior
 *    consent of U. T. Austin. 
 * 
 * Title to copyright to this software and its associated documentation
 * shall at all times remain with U. T. Austin. No right is granted to
 * use in advertising, publicity or otherwise any trademark, service
 * mark, or the name of U. T. Austin.
 * 
 * This software and any associated documentation are provided "as is,"
 * and U. T. AUSTIN MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESSED OR
 * IMPLIED, INCLUDING THOSE OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
 * PURPOSE, OR THAT USE OF THE SOFTWARE, MODIFICATIONS, OR ASSOCIATED
 * DOCUMENTATION WILL NOT INFRINGE ANY PATENTS, COPYRIGHTS, TRADEMARKS OR
 * OTHER INTELLECTUAL PROPERTY RIGHTS OF A THIRD PARTY. U. T. Austin, The
 * University of Texas System, its Regents, officers, and employees shall
 * not be liable under any circumstances for any direct, indirect, special,
 * incidental, or consequential damages with respect to any claim by USER
 * or any third party on account of or arising from the use, or inability
 * to use, this software or its associated documentation, even if U. T.
 * Austin has been advised of the possibility of those damages.
 * 
 * Submit commercialization requests to: Office of the Executive Vice
 * President and Provost, U. T. Austin, 201 Main Bldg., Austin, Texas,
 * 78712, ATTN: Technology Licensing Specialist.
d35 1
a35 1
static char sccsid[] = "$Id$ (cc.utexas.edu) %P%";
d299 1
a299 1
/* End $RCSfile$ */
@


1.31
log
@Change PrintOnly to PrintableOnly
@
text
@d110 1
@


1.30
log
@Add passwd.WhiteSpace config directive
@
text
@d111 1
a111 1
	{ "passwd.PrintOnly",		PWCHECK_PASSTHRU,	NONE },
@


1.29
log
@Call checkpassword_probe() when dumping config data
@
text
@d112 1
@


1.28
log
@Use get_debug() instead of DebugLevel var
@
text
@d316 1
@


1.27
log
@Change usage of checkpassword_verify()
@
text
@d227 1
a227 1
	if (DebugLevel >= DB_CONFIG) {
d308 1
a308 1
	if (DebugLevel >= DB_CONFIG) {
@


1.26
log
@Fix boo-boo in config table
@
text
@d194 1
d312 2
a313 1
	checkpassword_verify();
@


1.25
log
@Impliment -Xc (config dump) switch
@
text
@d105 11
a115 11
	{ "passwd.Dictionaries",	PWCHECK_PASSTHRU,	STRING },
	{ "passwd.SingleCase",		PWCHECK_PASSTHRU,	BOOLEAN },
	{ "passwd.AlphaOnly",		PWCHECK_PASSTHRU,	BOOLEAN },
	{ "passwd.MinPassword",		PWCHECK_PASSTHRU,	INT },
	{ "passwd.MaxPassword",		PWCHECK_PASSTHRU,	INT },
	{ "passwd.LengthWarn",		PWCHECK_PASSTHRU,	BOOLEAN },
	{ "passwd.PrintOnly",		PWCHECK_PASSTHRU,	BOOLEAN },
	{ "passwd.DisallowedChars",	PWCHECK_PASSTHRU,	STRING },
	{ "passwd.CharClasses",		PWCHECK_PASSTHRU,	INT },
	{ "passwd.PasswordChecks",	PWCHECK_PASSTHRU,	STRING },
	{ "passwd.History",		PWCHECK_PASSTHRU,	STRING },
@


1.24
log
@Include checkpassword.h
@
text
@a78 1

d105 11
a115 11
	{ "passwd.Dictionaries",	PWCHECK_PASSTHRU,	NONE },
	{ "passwd.SingleCase",		PWCHECK_PASSTHRU,	NONE },
	{ "passwd.AlphaOnly",		PWCHECK_PASSTHRU,	NONE },
	{ "passwd.MinPassword",		PWCHECK_PASSTHRU,	NONE },
	{ "passwd.MaxPassword",		PWCHECK_PASSTHRU,	NONE },
	{ "passwd.LengthWarn",		PWCHECK_PASSTHRU,	NONE },
	{ "passwd.PrintOnly",		PWCHECK_PASSTHRU,	NONE },
	{ "passwd.DisallowedChars",	PWCHECK_PASSTHRU,	NONE },
	{ "passwd.CharClasses",		PWCHECK_PASSTHRU,	NONE },
	{ "passwd.PasswordChecks",	PWCHECK_PASSTHRU,	NONE },
	{ "passwd.History",		PWCHECK_PASSTHRU,	NONE },
d137 2
a138 1
dump_config()
a142 2
		printf("%-20s code=%-5d type=%-5d ",
			f->keyword, f->code, f->datatype);
d145 4
d153 1
d156 7
a162 2
			printf("loc=%0x data=%0x",
				f->where, *((int *)f->where));
d166 7
a172 2
			printf("loc=%0x data=<%s>",
				f->where, *((char **)f->where));
a174 1
		printf("\n");
d228 1
a228 1
		dump_config();
d309 1
a309 1
		dump_config();
d312 4
@


1.23
log
@Call checkpassword_verify() after config file processing
@
text
@d62 1
@


1.22
log
@Fix config file symlink check
@
text
@d298 1
@


1.21
log
@Fix call of checkpassword_configure()
@
text
@d205 1
a205 1
		if (cfstat.st_mode & S_IFLNK) 
@


1.20
log
@1. Add copyright notice 2. Change names of some config variables 3. Change compile-time debug include trigger
@
text
@d250 1
a250 1
				char	cferr[128];
d252 2
a253 2
				if (!checkpassword_configure(cfline, cferr))
					die("Line %d: Error %s\n",lineno,cferr);
@


1.19
log
@1. Update directive table 2. Be more fascist about checking the configuration file mode & ownership
@
text
@d2 44
d63 2
a64 4
extern int	PasswdMatchTries;	/* From passwd.c */
extern int	PasswdMatchWait;	/* From passwd.c */
extern char	*PasswdHelpFile;	/* From passwd.c */
extern char	*PasswdMotdFile;	/* From passwd.c */
d66 3
a68 3
extern char	*ChshShellList;		/* From chsh.c */
extern char	*ChshHelpFile;		/* From chsh.c */
extern char	*ChshMotdFile;		/* From chsh.c */
d70 2
a71 2
extern char	*ChfnHelpFile;		/* From chfn.c */
extern char	*ChfnMotdFile;		/* From chfn.c */
d73 2
d101 2
d118 2
a119 4
	{ "passwd.MatchTries",	0, INT,		(void *)&PasswdMatchTries },
	{ "passwd.MatchWait",	0, INT,		(void *)&PasswdMatchWait },
	{ "passwd.Help",  	0, PATH,	(void *)&PasswdHelpFile },
	{ "passwd.Message",  	0, PATH,	(void *)&PasswdMotdFile },
d122 3
a124 3
	{ "chsh.Shells",	0, PATH,	(void *)&ChshShellList },
	{ "chsh.Help",  	0, PATH,	(void *)&ChshHelpFile },
	{ "chsh.Message",  	0, PATH,	(void *)&ChshMotdFile },
d127 2
a128 2
	{ "chfn.Help",  	0, PATH,	(void *)&ChfnHelpFile },
	{ "chfn.Message",  	0, PATH,	(void *)&ChfnMotdFile },
d186 1
a186 1
#ifndef	DEBUG
d239 2
a240 2
#ifdef	DEBUG
			warn("File %s line %d: Unrecognized directive\n",
d244 1
a244 1
			die("File %s line %d: Unrecognized directive\n", cfn, lineno);
@


1.18
log
@1. Add passwd.MatchWait and passwd.MinCharClasses
@
text
@d55 2
a56 2
	{ "PasswdTolerance",	0,	INT,	&PasswdTolerance },
	{ "ShadowTolerance",	0,	INT,	&ShadowTolerance },
d60 1
a60 1
	{ "passwd.MonocaseOK",		PWCHECK_PASSTHRU,	NONE },
d64 2
a65 1
	{ "passwd.PrintableOnly",	PWCHECK_PASSTHRU,	NONE },
d67 1
d69 1
a69 4
	{ "passwd.MinCharClasses",	PWCHECK_PASSTHRU,	NONE },
	{ "passwd.HistoryDatabase",	PWCHECK_PASSTHRU,	NONE },
	{ "passwd.HistoryAge",		PWCHECK_PASSTHRU,	NONE },
	{ "passwd.HistoryDepth",	PWCHECK_PASSTHRU,	NONE },
d74 1
a74 1
	{ "passwd.HelpFile",  	0, PATH,	(void *)&PasswdHelpFile },
d78 2
a79 2
	{ "chsh.ShellList",	0, PATH,	(void *)&ChshShellList },
	{ "chsh.HelpFile",  	0, PATH,	(void *)&ChshHelpFile },
d83 1
a83 1
	{ "chfn.HelpFile",  	0, PATH,	(void *)&ChfnHelpFile },
d126 1
a126 1
 *	configure(char *config-file-name);
d131 3
a133 2
configure(cfn)
	char	*cfn;			/* Config file name */
d138 1
d140 2
a141 9
	if ((cf = fopen(cfn, "r")) == NULL) {
		perror(cfn);
#ifdef	DEBUG
		warn("Cannot open configuration file \"%s\"\n", cfn);
		return;
#else
		die("Cannot open configuration file \"%s\"\n", cfn);
#endif
	}
d144 4
a147 2
	 * Sanity check - require configuration file to be owned
	 * by the effective uid this program is running with
d149 1
a149 1
	if (getuid() != geteuid()) {
a150 1
		struct stat cfstat;
a151 1
		fstat(fileno(cf), &cfstat);
d153 1
a153 1
			die("Configuration file \"%s\" is not owned by user %d\n",
d155 8
d165 4
@


1.17
log
@Add "alpha only" config switch for passwd
@
text
@d20 1
d34 1
d67 1
d74 1
@


1.16
log
@Add config parameters for password history (oops)
@
text
@d59 1
d179 1
a179 1
			if (strcmp(cfv[0], cfi->keyword) == 0) {
@


1.15
log
@1. Add comments  2. Allow end-of-line comments  3. Don't remove leading stuff from checkpasswd passthroughs
@
text
@d65 2
a66 1
	{ "passwd.HistoryParams",	PWCHECK_PASSTHRU,	NONE },
@


1.14
log
@Fix punctutation for die() messages
@
text
@d2 9
a10 1
 * configure - Process the npasswd configuration file
d14 1
a14 1
static char sccsid[] = "$Id$ (cc.utexas.edu)";
d19 3
a21 3
extern int	PasswdMatchTries;
extern char	*PasswdHelpFile;
extern char	*PasswdMotdFile;
d23 3
a25 3
extern char	*ChshShellList;
extern char	*ChshHelpFile;
extern char	*ChshMotdFile;
d27 2
a28 2
extern char	*ChfnHelpFile;
extern char	*ChfnMotdFile;
d30 2
a31 2
extern int	PasswdTolerance;
extern int	ShadowTolerance;
d33 1
a33 1
#define	PWCHECK_PASSTHRU	'p'
d47 3
a49 3
 * The master configuration table.  This is pretty much a brute-force way
 * of doing configuration, but the number of directives is small, so
 * simple is good.
d53 2
a54 2
	{ "PasswdTolerance",		0,	INT,	&PasswdTolerance },
	{ "ShadowTolerance",		0,	INT,	&ShadowTolerance },
d57 1
d83 4
d117 7
a123 1
 *	config - read validation configuration file and stash away
d172 1
a172 1
		if ((cfv = split(cfline, '\0', 0, '\0')) == 0)
d174 1
a174 1
		debug(DB_CONFIG, "[%d] %s", lineno, cfline);
a193 1
				char	*x = strchr(cfline, '.');
d196 1
a196 1
				if (!checkpassword_configure(++x, cferr))
@


1.13
log
@Change name of configuration variables
@
text
@d117 1
a117 1
		warn("Cannot open configuration file \"%s\"", cfn);
d120 1
a120 1
		die("Cannot open configuration file \"%s\"", cfn);
@


1.12
log
@Beta 3 development checkin 2
@
text
@d15 3
a17 3
extern char	*chsh_shells;
extern char	*chsh_help;
extern char	*chsh_motd;
d19 2
a20 2
extern char	*chfn_help;
extern char	*chfn_motd;
d22 3
d44 3
d64 3
a66 3
	{ "chsh.ShellList",	0, PATH,	(void *)&chsh_shells },
	{ "chsh.HelpFile",  	0, PATH,	(void *)&chsh_help },
	{ "chsh.Message",  	0, PATH,	(void *)&chsh_motd },
d69 2
a70 2
	{ "chfn.HelpFile",  	0, PATH,	(void *)&chfn_help },
	{ "chfn.Message",  	0, PATH,	(void *)&chfn_motd },
d96 1
a96 1
				f->where, f->where);
@


1.11
log
@beta 3 cycle 1 checkin
@
text
@d43 8
a50 10
	{ "passwd.mandatory",	PWCHECK_PASSTHRU,	NONE },
	{ "passwd.optional",	PWCHECK_PASSTHRU,	NONE },
	{ "passwd.singlecase",	PWCHECK_PASSTHRU,	NONE },
	{ "passwd.minlength",	PWCHECK_PASSTHRU,	NONE },
	{ "passwd.maxlength",	PWCHECK_PASSTHRU,	NONE },
	{ "passwd.printonly",	PWCHECK_PASSTHRU,	NONE },
	{ "passwd.badchars",	PWCHECK_PASSTHRU,	NONE },
	{ "passwd.checkorder",  PWCHECK_PASSTHRU,	NONE },
	{ "passwd.history",	PWCHECK_PASSTHRU,	NONE },
	{ "passwd.dictionaries", PWCHECK_PASSTHRU,	NONE },
d53 3
a55 3
	{ "passwd.match",	0, INT,		(void *)&PasswdMatchTries },
	{ "passwd.help",  	0, PATH,	(void *)&PasswdHelpFile },
	{ "passwd.motd",  	0, PATH,	(void *)&PasswdMotdFile },
d58 3
a60 3
	{ "chsh.shells",	0, PATH,	(void *)&chsh_shells },
	{ "chsh.help",  	0, PATH,	(void *)&chsh_help },
	{ "chsh.motd",  	0, PATH,	(void *)&chsh_motd },
d63 2
a64 2
	{ "chfn.help",  	0, PATH,	(void *)&chfn_help },
	{ "chfn.motd",  	0, PATH,	(void *)&chfn_motd },
@


1.10
log
@Change XBUFLEN to TMPBUFSIZ
@
text
@d12 2
a13 2
extern char	PasswdHelpFile[];
extern char	PasswdMotdFile[];
d15 3
a17 5
extern char	chsh_shells[];
extern char	chsh_help[];
extern char	chsh_motd[];
extern char	chfn_help[];
extern char	chfn_motd[];
d19 4
a22 1
#define	PASSTHRU	'p'
d37 2
a38 2
 * of doing configuration, but since the number of directives is small,
 * getting complicated won't by me anything.
d43 10
a52 10
	{ "passwd.mandatory",	PASSTHRU,	NONE },
	{ "passwd.optional",	PASSTHRU,	NONE },
	{ "passwd.singlecase",	PASSTHRU,	NONE },
	{ "passwd.minlength",	PASSTHRU,	NONE },
	{ "passwd.maxlength",	PASSTHRU,	NONE },
	{ "passwd.printonly",	PASSTHRU,	NONE },
	{ "passwd.badchars",	PASSTHRU,	NONE },
	{ "passwd.checkorder",  PASSTHRU,	NONE },
	{ "passwd.history",	PASSTHRU,	NONE },
	{ "passwd.dictionaries", PASSTHRU,	NONE },
d56 2
a57 2
	{ "passwd.help",  	0, PATH,	(void *)PasswdHelpFile },
	{ "passwd.motd",  	0, PATH,	(void *)PasswdMotdFile },
d60 3
a62 3
	{ "chsh.shells",	0, PATH,	(void *)chsh_shells },
	{ "chsh.help",  	0, PATH,	(void *)chsh_help },
	{ "chsh.motd",  	0, PATH,	(void *)chsh_motd },
d65 2
a66 2
	{ "chfn.help",  	0, PATH,	(void *)chfn_help },
	{ "chfn.motd",  	0, PATH,	(void *)chfn_motd },
d80 1
a80 1
			if (f->code == PASSTHRU)
a99 138
 * split - Tokenize line
 */
public int
split(cbuf, vbuf)
	char	*cbuf;
	char	**vbuf;
{
	register char	*ts,	/* Start of token */
			*te;	/* End of token */
	int	nitems = 0;

	if (cbuf == 0)
		return(0);
	ts = te = cbuf;
	while (*ts) {
		while (*te && *te <= ' ')	/* Find start of next token */
			te++;
		if (!*te)
			break;
		ts = te;
		while (*te && *te > ' ') *te++; /* Find end of this token */
		if (*te)
			*te++ = '\0';
		*vbuf++ = ts;
		nitems++;
	}
	*vbuf = 0;
	return(nitems);
}

/*
 *	Is argument an octal digit?
 */
private int
octdigit(c)
	char	c;
{
	return (c >= '0' && c <= '7');
}

/*
 *	Is argument a decimal digit?
 */
private int
decdigit(c)
	char	c;
{
	return (c >= '0' && c <= '9');
}

/*
 *	Is argument a hexidecimal digit?
 */
private int
hexdigit(c)
	char	c;
{
	return (decdigit(c) |
		(c >= 'a' &&  c <= 'f') |
		(c >= 'A' && c <= 'F'));
}

/*
 *	decode_boolean - decode a boolean value
 */
private int
decode_boolean(s)
	char	*s;
{
	return(*s == '1'
		| strcmp(s, "true") == 0
		| strcmp(s, "yes") == 0
		| strcmp(s, "on") == 0);
}

/*
 *	xatoi - Smart 'atoi' recognizes decimal, octal and hex constants
 */
private int
xatoi(ip, ipp, iv)
	char	*ip,	/* Pointer to number string */
		**ipp;	/* Stash pointer to end of string */ /* RETURN VALUE */
	int	*iv;	/* RETURN VALUE */
{
	int	(*func)() = decdigit,	/* Function to check char */
		base = 10;		/* Conversion base */
	int	t = 0,			/* Return value */
		mult = 1;		/* Sign of result */
	char	*fcc = ip;		/* First char position */

	if (*ip == '-') {		/* Negative number? */
		ip++;
		mult = -1;
	}
	if (*ip == '0') { 	/* Leading '0'? */
		ip++;
		if (*ip == 'x' || *ip == 'X') {	/* Hex */
			base = 16;
			func = hexdigit;
			ip++;			/* Skip 'x' */
		}
		else {
			base = 8;		/* Octal */
			func = octdigit;
		}
	}
	while (*ip && (*func)(*ip)) {
		t *= base;
		if (decdigit(*ip))
			t += (*ip - '0');
		else
			t += (*ip >= 'a' ? *ip - 0x57 : *ip - 0x37);
		ip++;
	}
	if (ip == fcc)		/* Nothing processed */
		return(0);
	if (ipp)		/* Stash new pointer location */
		*ipp = ip;
	*iv = (t * mult);
	return(1);
}

/*
 *	decode_int - decode an integer value
 */
private int
decode_int(s)
	char	*s;		/* String to decode */
{
	int	t;	/* Temp */

	if (xatoi(s, (char *)0, &t))
		return(t);
	fprintf(stderr, "Bad numeric value '%s'\n", s);
	return(-1);
}

/*
a100 1
 *		** Memory allocated by parse() is NOT freed **
d120 4
d143 1
a143 2
		char	cftemp[1024],	/* Copy of cfline */
			*cfv[64];	/* Tokenized cftemp */
d148 2
a149 2
		(void) strcpy(cftemp, cfline);
		if (split(cftemp, cfv) == 0)
d170 2
a171 2
			if (cfi->code == PASSTHRU) {
				char	*x = index(cfline, '.');
d200 1
a200 1
			(void) strncpy((char *)cfi->where, cfv[1], MAXPATHLEN);
d205 1
a205 1
				(void) strcpy((char *)cfi->where, cfv[1]);
@


1.9
log
@1. Call checkpassword_init() before processing config file 2. Use debug() routine
@
text
@d244 1
a244 1
	char	cfline[XBUFLEN]; /* Input buffer */
@


1.8
log
@Add 'dictionaries' directive
@
text
@d272 1
d286 1
a286 3
#ifdef	DEBUG
		printf ("[%d] %s", lineno, cfline);
#endif
@


1.7
log
@Beta 3 development checkin
@
text
@d51 1
@


1.6
log
@Add chfn and chsh sstuff
@
text
@a234 1
#if	0
a235 68
 *	decode_string - Copy string, converting backslash escapes
 *	Can handle most of the C backslash escape sequences
 */
private void
decode_string(dst, src, len)
	char	*dst,		/* Destination */
		*src;		/* Source */
	int	len;
{
	int	t;		/* Temp */
	char	*dstx = dst;	/* Pointer to start of destination */
	char	quote = 0;	/* Quote character */

	if (*src == '"' || *src == '\'')
		quote = *src++;

#define	putxchar(P) *dst++ = (P)
	for (; *src && (dst - dstx) < len; ) {
		if (*src == '\\') {
			src++;
			switch(*src) {
			case 'a':	putxchar('\007'); src++; break;
			case 'b':	putxchar('\b'); src++; break;
			case 'f':	putxchar('\f'); src++; break;
			case 'n':	putxchar('\n'); src++; break;
			case 'r':	putxchar('\r'); src++; break;
			case 't':	putxchar('\t'); src++; break;
			case '\\':	putxchar('\\'); src++; break;
			case '0': case '1': case '2': case '3':
			case '4': case '5': case '6': case '7':
			case 'x':
				if (xatoi(src, &src, &t))
					putxchar(t & 0xff);
				break;
			default:
				if (quote && *src == quote)
					*dst++ = *src++;
				break;
			}
			continue;
		}
		if (*src == '^') {	/* ^C = control-c */
			src++;
			if (isupper(*src))
				putxchar(*src - '@@');
			else if (islower(*src))
				putxchar(*src - '`');
			else switch (*src) {
			     case '[':	putxchar('\033'); break;
			     case '\\':	putxchar('\034'); break;
			     case ']':	putxchar('\035'); break;
			     case '^':	putxchar('\036'); break;
			     case '-':	putxchar('\037'); break;
			}
			src++;
			continue;
		}
		if (quote && *src == quote)
			break;
		*dst++ = *src++;
	}
#undef	putxchar
	*dst = 0;
}
#endif


/*
d243 1
a243 1
	char	cfline[1024];	/* Input buffer */
d258 1
a258 1
		uid_t	euid = geteuid();
d306 1
a306 1
				char	*x = INDEX(cfline, '.');
@


1.5
log
@Cleanup debugging statements
@
text
@a14 2
#if	0
/* Hooks for stuff that isn't attached yet */
a19 1
#endif
a56 1
#if	0
d59 2
a60 2
	{ "chsh.help",  	0, PATH,	(void *)chsh_helpfile },
	{ "chsh.motd",  	0, PATH,	(void *)chsh_motdfile },
d62 3
a64 4
	/* Configuration for 'chfn' module */
	{ "chfn.help",  	0, PATH,	(void *)chfn_helpfile },
	{ "chfn.help",  	0, PATH,	(void *)chfn_helpfile },
#endif
@


1.4
log
@Fix error message
@
text
@d107 2
a108 2
char	*cbuf;
char	**vbuf;
d138 1
a138 1
char	c;
d148 1
a148 1
char	c;
d158 1
a158 1
char	c;
d170 1
a170 1
char	*s;
d183 3
a185 3
char	*ip,		/* Pointer to number string */
	**ipp;		/* Stash pointer to end of string */ /* RETURN VALUE */
int	*iv;		/* RETURN VALUE */
d230 1
a230 1
char	*s;		/* String to decode */
d247 3
a249 3
char	*dst,		/* Destination */
	*src;		/* Source */
int	len;
d315 1
a315 1
char	*cfn;			/* Config file name */
d341 1
a341 2
#ifdef	DEBUG_CONFIG
	if (DebugLevel > DEBUG_CONFIG) {
a344 2
#endif

d425 1
a425 2
#ifdef	DEBUG_CONFIG
	if (DebugLevel > DEBUG_CONFIG) {
a428 1
#endif
@


1.3
log
@Add passwd.history directive
@
text
@d388 1
d390 1
a390 1
			die("Line %d: Internal error (NONE)\n", cfline);
@


1.2
log
@Fix configuration file checks
@
text
@d53 1
@


1.1
log
@Initial revision
@
text
@d322 4
d327 1
a329 1
	fstat(fileno(cf), &stat);
a330 1
		struct stat stat;
d332 1
d334 2
a335 1
		if (stat.st_uid != euid)
@
