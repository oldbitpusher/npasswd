head	1.14;
access;
symbols;
locks; strict;
comment	@ * @;


1.14
date	2002.10.02.15.47.55;	author clyde;	state Exp;
branches;
next	1.13;

1.13
date	98.06.23.00.00.00;	author clyde;	state Exp;
branches;
next	1.12;

1.12
date	98.04.28.00.00.00;	author clyde;	state Exp;
branches;
next	1.11;

1.11
date	97.05.05.00.00.00;	author clyde;	state Exp;
branches;
next	1.10;

1.10
date	96.08.29.00.00.00;	author clyde;	state Exp;
branches;
next	1.9;

1.9
date	96.08.15.00.00.00;	author clyde;	state Exp;
branches;
next	1.8;

1.8
date	96.08.13.00.00.00;	author clyde;	state Exp;
branches;
next	1.7;

1.7
date	96.08.09.00.00.00;	author clyde;	state Exp;
branches;
next	1.6;

1.6
date	96.08.06.00.00.00;	author clyde;	state Exp;
branches;
next	1.5;

1.5
date	96.04.03.00.00.00;	author clyde;	state Exp;
branches;
next	1.4;

1.4
date	95.04.05.00.00.00;	author clyde;	state Exp;
branches;
next	1.3;

1.3
date	94.10.24.00.00.00;	author clyde;	state Exp;
branches;
next	1.2;

1.2
date	94.09.28.00.00.00;	author clyde;	state Exp;
branches;
next	1.1;

1.1
date	94.07.28.00.00.00;	author clyde;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Change copyright to GNU General License
@
text
@/*
 * Copyright (C) 2002  The University of Texas at Austin ("U. T. Austin").
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 *  Contact: npasswd-support@@www.utexas.edu
 *
 */

/*
 *	This program duplicates the manual page behavior of the 4.XBSD
 *	chsh(1) command.
 */
#ifndef lint
static char sccsid[] = "$Id: chsh.c,v 1.13 1998/06/23 00:00:00 clyde Exp clyde $ (cc.utexas.edu) %P%";
#endif

#include "npasswd.h"
#include "Methods/pwm_defs.h"

private enum chg_perm can_change_shell _((struct mpasswd *, struct mpasswd *));
private int shell_ok _((char *));

Config_Value char	*Chsh_Help = CHSH_HELP,
			*Chsh_Motd = CHSH_MOTD,
			*Chsh_Shells = SHELLS_FILE;

/*
 * chsh - Shell change module
 */
public void chsh(theUser, theCaller)
	struct mpasswd	*theUser,
			*theCaller;
{
	char	newShell[BUFSIZ];
	enum	chg_perm	perm;
	struct mpasswd	*newUser;

	if ((perm = can_change_shell (theUser, theCaller)) == deny)
		die("Permission denied.\n");

#ifdef  USE_NIS
	yp_password(theUser);
#endif
	motd(Chsh_Motd, (char *)0);

	if (perm == self && !shell_ok (theUser->mpw_shell)) {
		printf("Cannot change from restricted shell %s.\n", 
			 theUser->mpw_shell);
		return;
	}

	printf("Changing shell for %s on %s\n", 
		theUser->mpw_name, theUser->pws_loc);

	for (;;) {
		if (!XSwitches[Xsw_UseStdin]) {
			printf("Old shell: %s\n", theUser->mpw_shell);
			printf("New shell (? for help): ");
		}
		if (fgets(newShell, BUFSIZ, stdin) == NULL) {
			if (feof(stdin)) {
				printf("\nShell unchanged\n");
				return;
			}
			else {
				die ("Error while reading stdin\n");
			}
		}
		chop_nl(newShell);
		if (strcmp(newShell, "?") == 0) {
			motd(Chsh_Help, "Sorry, there is no help.\n");
			continue;
		}
		break;
	}
	
	if (*newShell == '\0' || strcmp(theUser->mpw_shell, newShell) == 0) {
		printf("Login shell unchanged\n");
		return;
	}

	if (!shell_ok(newShell)) {
		printf("%s is unacceptable as a new shell.\n", newShell);
		return;
	}

	newUser = copympwent(theUser, (struct mpasswd *)0);
	newUser->mpw_shell = newShell;

	pw_replace(theUser, newUser, CHG_SHELL);
	syslog(LOG_INFO,
	       "Login shell changed on %s for %s by %s\n",
	       theUser->pws_loc, theUser->mpw_name, theCaller->mpw_name);
}

/*
 * shell_ok
 *	Validate shell against allowed list
 * Usage
 *	ok = shell_ok(char *shellpath);
 *
 * Use getusershell() if available, else use <ChshShellsFile>.
 */
#ifdef	HAS_GETUSERSHELL

extern char	*getusershell();
extern void	setusershell();

private
shell_ok(theShell)
	char	*theShell;
{
	/*
	 * Use system routines to get blessed shells
	 */
	char	*goodShell;

	setusershell();
	while (goodShell = getusershell()) {
		if (strcmp(theShell, goodShell) == 0)
			return(1);
	}
	return(0);
}
#else	/* HAS_GETUSERSHELL */

private char *default_shells[] = {
	"/bin/sh",
	"/bin/csh",
	0
};

private
shell_ok(theShell)
	char	*theShell;
{
	FILE	*shellf;
	char	goodShell[BUFSIZ];
	int	found = 0;

	shellf = fopen(Chsh_Shells, "r");
	if (shellf == NULL) {
		/*
		 * No shells file - sanity check against the built-in
		 * list of sensible shells
		 */
		char	**shl;

		for (shl = default_shells; *shl; shl++) {
			if (strcmp(*shl, theShell) == 0)
				return(1);
		}
	}
	/*
	 * Consult the system shells file
	 */
	while (fgets(goodShell, sizeof(goodShell), shellf)) {
		if (strchr(goodShell, '\n') == 0)
			continue;
		chop_nl(goodShell);
		if (goodShell[0] == '#' || goodShell[0] == '\0')
			continue;
		if (strcmp(goodShell, theShell) == 0) {
			found = 1;
			break;
		}
	}
	(void) fclose (shellf);
	return (found);
}
#endif	/* HAS_GETUSERSHELL */

/*
 * can_change_shell
 *	Check shell change permission
 *
 * Returns
 *	<other> if caller is root
 *	<deny> if caller and target are different
 *	<self> if ok
 */
private enum chg_perm
can_change_shell (theUser, theCaller)
	struct mpasswd	*theUser,
			*theCaller;
{
	Uid_t	calluid = getuid();

	if (calluid == 0)		/* Su can change anybody's shell */
		return(other);

	if (strcmp(theCaller->mpw_name, theUser->mpw_name))
		return(deny);		/* I'm not root and target isn't me */

	return(self);			/* I can always change my login shell */
}
/*
 * End $RCSfile: chsh.c,v $
 */
@


1.13
log
@Add copyright notice
@
text
@d2 1
a2 2
 * Copyright 1998, The University of Texas at Austin ("U. T. Austin").
 * All rights reserved.
d4 4
a7 2
 * By using this software the USER indicates that he or she has read,
 * understood and will comply with the following:
d9 4
a12 3
 * U. T. Austin hereby grants USER permission to use, copy, modify, and
 * distribute this software and its documentation for any purpose and
 * without fee, provided that:
d14 6
a19 31
 * 1. the above copyright notice appears in all copies of the software
 *    and its documentation, or portions thereof, and 
 * 2. a full copy of this notice is included with the software and its
 *    documentation, or portions thereof, and 
 * 3. neither the software nor its documentation, nor portions thereof,
 *    is sold for profit. Any commercial sale or license of this software,
 *    copies of the software, its associated documentation and/or
 *    modifications of either is strictly prohibited without the prior
 *    consent of U. T. Austin. 
 * 
 * Title to copyright to this software and its associated documentation
 * shall at all times remain with U. T. Austin. No right is granted to
 * use in advertising, publicity or otherwise any trademark, service
 * mark, or the name of U. T. Austin.
 * 
 * This software and any associated documentation are provided "as is,"
 * and U. T. AUSTIN MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESSED OR
 * IMPLIED, INCLUDING THOSE OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
 * PURPOSE, OR THAT USE OF THE SOFTWARE, MODIFICATIONS, OR ASSOCIATED
 * DOCUMENTATION WILL NOT INFRINGE ANY PATENTS, COPYRIGHTS, TRADEMARKS OR
 * OTHER INTELLECTUAL PROPERTY RIGHTS OF A THIRD PARTY. U. T. Austin, The
 * University of Texas System, its Regents, officers, and employees shall
 * not be liable under any circumstances for any direct, indirect, special,
 * incidental, or consequential damages with respect to any claim by USER
 * or any third party on account of or arising from the use, or inability
 * to use, this software or its associated documentation, even if U. T.
 * Austin has been advised of the possibility of those damages.
 * 
 * Submit commercialization requests to: Office of the Executive Vice
 * President and Provost, U. T. Austin, 201 Main Bldg., Austin, Texas,
 * 78712, ATTN: Technology Licensing Specialist.
d27 1
a27 1
static char sccsid[] = "$Id$ (cc.utexas.edu) %P%";
d211 1
a211 1
 * End $RCSfile$
@


1.12
log
@1. Change name of help & motd file 2. Replace SHELL_NAME_SIZE with BUFSIZ
@
text
@d2 44
@


1.11
log
@Change missing help file message
@
text
@d15 3
a17 3
#ifndef SHELL_NAME_SIZE
# define SHELL_NAME_SIZE 80
#endif
a18 4
Config_Value char	*ChshHelpFile = CHSH_HELP,
			*ChshMotdFile = CHSH_MOTD,
			*ChshShellList = SHELLS_FILE;

d26 1
a26 1
	char	newShell[SHELL_NAME_SIZE];
d36 1
a36 1
	motd(ChshMotdFile, (char *)0);
d52 1
a52 1
		if (fgets(newShell, SHELL_NAME_SIZE, stdin) == NULL) {
d63 1
a63 1
			motd(ChshHelpFile, "Sorry, there is no help.\n");
d130 1
a130 1
	char	goodShell[SHELL_NAME_SIZE];
d133 1
a133 1
	shellf = fopen(ChshShellList, "r");
d149 3
a151 1
	while (fgets(goodShell, SHELL_NAME_SIZE, shellf)) {
@


1.10
log
@Remove 'const' declarations (too much compiler pain)
@
text
@d67 1
a67 1
			motd(ChshHelpFile, "Missing help file");
@


1.9
log
@1. Fix use of const 2. Use getusershell() if available
@
text
@d12 2
a13 2
private enum chg_perm can_change_shell _((const struct mpasswd *, const struct mpasswd *));
private int shell_ok _((const char *));
d96 1
a96 1
 *	ok = shell_ok(const char *shellpath);
d107 1
a107 1
	const char	*theShell;
d131 1
a131 1
	const char	*theShell;
d178 2
a179 2
	const struct mpasswd	*theUser,
				*theCaller;
@


1.8
log
@Change configuration variable names
@
text
@d12 2
a13 2
private enum chg_perm can_change_shell _((struct mpasswd *, struct mpasswd *));
private int shell_ok _((char *));
a22 6
private char *default_shells[] = {
	"/bin/sh",
	"/bin/csh",
	0
};

a39 1

d93 6
a98 1
 *      shell_ok - check shell against CHSH_SHELLS file.
d100 8
a107 2
private int shell_ok(theShell)
char	*theShell;
d109 24
d165 1
d168 2
a169 1
 *	can_change_shell - check shell change permission
d171 4
a174 2
 *	Returns 1 if shell can be changed
 *		0 if not
d176 4
a179 3
private enum chg_perm can_change_shell (theUser, theCaller)
struct mpasswd	*theUser,
		*theCaller;
@


1.7
log
@Beta 3 development checkin 2
@
text
@d19 3
a21 3
Config_Value char	*chsh_help = CHSH_HELP,
			*chsh_motd = CHSH_MOTD,
			*chsh_shells = SHELLS_FILE;
d47 1
a47 1
	motd(chsh_motd, (char *)0);
d74 1
a74 1
			motd(chsh_help, "Missing help file");
d90 1
a90 1
	newUser = copympwent(theUser);
d109 1
a109 1
	shellf = fopen(chsh_shells, "r");
@


1.6
log
@beta 3 cycle 1 checkin
@
text
@d10 1
a10 1
#include "pwm_defs.h"
@


1.5
log
@Reflect new mpasswd structure element names
@
text
@d12 2
a13 7
#ifdef __STDC__
private enum chg_perm can_change_shell(struct mpasswd *, struct mpasswd *);
private int shell_ok(char *);
#else
private enum chg_perm can_change_shell();
private int shell_ok();
#endif
a14 13

#ifndef CHSH_HELP
# define	CHSH_HELP	"/usr/adm/chsh.help"
#endif

#ifndef CHSH_MOTD
# define	CHSH_MOTD	"/usr/adm/chsh.motd"
#endif

#ifndef CHSH_SHELLS
# define	CHSH_SHELLS	"/etc/shells"
#endif

d19 3
a21 3
public char	chsh_help[MAXPATHLEN] = { CHSH_HELP },
		chsh_motd[MAXPATHLEN] = { CHSH_MOTD },
		chsh_shells[MAXPATHLEN] = { CHSH_SHELLS };
d23 12
a34 3
public void chsh(user, caller)
struct mpasswd	*user,
		*caller;
a35 1
	char	*sx;
d38 3
a40 2
	
	if ((perm = can_change_shell (user, caller)) == deny)
d42 5
a46 1
	
a47 7
	
	if (!ProgramInput) {
		fprintf(stderr,
			"Changing shell for %s on %s\n", 
			user->mpw_name, user->pws_loc);
		fflush(stderr);
	}
d49 3
a51 4
	if (perm == self && !shell_ok (user->mpw_shell)) {
		fprintf(stderr, "Cannot change from restricted shell %s.\n", 
			 user->mpw_shell);
		fflush(stderr);
d55 7
a61 5
	for ( ;; ) {
		if (!ProgramInput) {
			fprintf(stderr, "Old shell: %s\n", user->mpw_shell);
			fprintf(stderr, "New shell (? for help): ");
			fflush(stderr);
d63 1
a63 3
		sx = fgets(newShell, SHELL_NAME_SIZE, stdin);

		if (sx == NULL) {
d65 1
a65 2
				fprintf(stderr, "\nLogin shell unchanged\n");
				fflush(stderr);
d72 1
a72 2
		if (sx = index(newShell, '\n'))
			*sx = '\0';
d80 2
a81 3
	if (*newShell == '\0' || strcmp(user->mpw_shell, newShell) == 0) {
		fprintf(stderr, "Login shell unchanged\n");
		fflush(stderr);
d86 1
a86 3
		fprintf(stderr, "%s is unacceptable as a new shell.\n",
			newShell);
		fflush(stderr);
d89 5
a93 1
	pw_replace(user, (char *)0, (char *)0, newShell);
d96 1
a96 5
	       user->pws_loc, user->mpw_name, caller->mpw_name);
#ifdef	USE_NIS
	yp_sync();
#endif
	return;
d105 1
a105 2
	FILE	*shells;
	char	*rc;
a106 1
	char	*tptr;
d109 12
a120 3
	shells = fopen(CHSH_SHELLS, "r");
	if (shells == NULL) {
		die("/etc/shells file missing\n");
d122 6
a127 11
	while (!found) {
		rc = fgets(goodShell, SHELL_NAME_SIZE, shells);
		if (rc == NULL) {
			if (feof(shells)) {
				break;
			}
			else {
				die("error reading /etc/shells\n");
			}
		}
		if (goodShell[0] == '#' || goodShell[0] == '\0') {
a128 3
		}
		for (tptr = goodShell; *tptr != '\n' && *tptr != '\0'; tptr++) ;
		if (*tptr == '\n') *tptr = '\0';
d131 1
d134 1
a134 1
	(void) fclose (shells);
@


1.4
log
@Beta 3 development checkin
@
text
@d57 1
a57 1
			user->mpw_name, user->where);
d110 1
a110 1
	       user->where, user->mpw_name, caller->mpw_name);
@


1.3
log
@Change YP_PASSWD to YP_SUPPORT
@
text
@a11 2
#include TIME_H

d86 1
a86 1
		if (sx = INDEX(newShell, '\n'))
d108 1
a108 3

#ifdef	USE_SYSLOG
	syslog(MESSAGE_LOG_LEVEL,
d111 1
a111 3
#endif

#ifdef	YP_SUPPORT
a113 1

d166 1
a166 1
	uid_t	calluid = getuid();
@


1.2
log
@Change include file used
@
text
@d117 1
a117 1
#ifdef	YP_PASSWD
@


1.1
log
@Initial revision
@
text
@d10 1
a10 2
#include "pw_defs.h"
#include "pw_nis.h"
@
