head	1.6;
access;
symbols;
locks; strict;
comment	@# @;


1.6
date	98.09.16.00.00.00;	author clyde;	state Exp;
branches;
next	1.5;

1.5
date	98.08.17.00.00.00;	author clyde;	state Exp;
branches;
next	1.4;

1.4
date	98.06.25.00.00.00;	author clyde;	state Exp;
branches;
next	1.3;

1.3
date	98.03.24.00.00.00;	author clyde;	state Exp;
branches;
next	1.2;

1.2
date	97.04.29.00.00.00;	author clyde;	state Exp;
branches;
next	1.1;

1.1
date	96.08.30.00.00.00;	author clyde;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Change PrintOnly to PrintableOnly
@
text
@case $CONFIG in
'')
	if test -f config.sh; then TOP=.;
	elif test -f ../config.sh; then TOP=..;
	elif test -f ../../config.sh; then TOP=../..;
	elif test -f ../../../config.sh; then TOP=../../..;
	elif test -f ../../../../config.sh; then TOP=../../../..;
	else
		echo "Can't find config.sh."; exit 1
	fi
	. $TOP/config.sh
	;;
esac
: This forces SH files to create target in same directory as SH file.
: This is so that make depend always knows where to find SH derivatives.
case "$0" in
*/*) cd `expr X$0 : 'X\(.*\)/'` ;;
esac

echo "Extracting passwd.conf (with variable substitutions)"

$spitshell > passwd.conf <<'!NO!SUBS!'
#
# Example npasswd configuration file.
#
# See ../doc/Reference.html for details.
#
# $Id$ (cc.utexas.edu)
#
# Npasswd is a part of the system security infrastructure, and so will not
# accept an insecure or faulty master configuration file. This file must
# be owned by root (if npasswd does not run setuid root, then the
# configuration file must be owned by that uid), and *not* be world-writable.
# 
# Lines starting with "#" (such as this one) and blank lines are ignored.
# 
# Npasswd will abort if a syntax error is encountered in this file. 
# 
# The syntax of a configuration file can be testing by using the -XC option.
# 
# Npasswd is in essence three related programs: passwd, chfn and chsh. Each of
# these sub-programs have distinct functionality and separate configuration
# directives. There are also global directives.
# 
# Configuration directives are of the form
# 
#      sub-program.option<space>value
# 
#      sub-program.
#           Is one of passwd, chfn, chsh, or empty. A non-empty sub-program
#           name must be followed by a period.
#      option
#           Option name.
#      <space>
#           One or more whitespace characters.
#      value
#           Value for option.
# 
# There are the following data types for option values:
# 
#      number
#           May be decimal, octal (syntax 0NNN) or hex (syntax 0xNNNN), and
#           have a leading minus sign to indicate a negative value.
#      path
#           A UNIX pathname.
#      boolean
#           One of the strings "1", "true" "yes" or "on". Any other value is
#           interpreted as "false".
#      string
#           Strings can be optionally enclosed in single (') or double (")
#           quotes.
#           Non-printable ASCII characters can specified was follows:
#         * ^<caret>char" e.g. ^X for control-x.
#         * "\<backslash>char" for C special characters (\b \f \h \n \r \t
#           \\).
#         * "\0xNNN" where NNN is the character value in hex.
#         * "\0NNN" where NNN is the character value in octal.
# ----------------------------------------------------------------------------
# 
#  Configuration directives
# 
# Directive		Value	Description
#			type
# 
# PasswdTolerance	number	Tolerance between old and new passwd files
# ShadowTolerance	number	Tolerance between old and new shadow files
# MatchTries		number	Chances to give user to correctly
#				enter a password
# MatchWait		number	Delay after the user enters an
#				incorrect password
#
#	Directives for sub-program passwd
#
# passwd.AlphaOnly	boolean	Allow alpha-only passwords
# passwd.CharClasses	number	Minimum number of character classes required
# passwd.Dictionaries	path	Password check dictionaries location
# passwd.DisallowedChars string	Change list of non-allowed characters
# passwd.Help 		path	Help file for passwd
# passwd.History age	number	Password history age
# passwd.History dbm	path 	Set path to history db (DBM database)
# passwd.History depth	number	How many password to keep per user
# passwd.History file	path 	Set path to history db (flat file)
# passwd.History none 		Disable password history
# passwd.LengthWarn	boolean	Warn about passwords over MaxPassword length
# passwd.MaxPassword	number	Maximum effective password length
# passwd.MaxRepeat	number	How many repeated characters allowed 
# passwd.Message	path	Message of the day file for passwd
# passwd.MinPassword	number	Minimum password length
# passwd.PasswordChecks	string	Choose password check functions
# passwd.PrintableOnly	boolean	Deny non-printable characters in passwords
# passwd.Singlecase	boolean	Allow single-case passwords
# passwd.WhiteSpace	boolean	Deny whitespace characters in passwords
#
#	Directives for sub-program chfn
#
# chfn.Help		path	Help file for chfn
# chfn.Message		path	Message of the day
#
#	Directives for sub-program chsh
#
# chsh.Help		path	Help file for chsh
# chsh.Message		path	Message of the day
# chsh.Shells		path	List of blessed shells
# 
!NO!SUBS!
$spitshell >> passwd.conf <<!GROK!THIS!
#
# Password check dictionaries
#
# passwd.Dictionaries	$p_dictlib
#
!GROK!THIS!

chmod 644 passwd.conf
$eunicefix passwd.conf
@


1.5
log
@1. Add passwd.Whitespace, passwd.AlphaOnly 2. Sort passwd directives in alpha order
@
text
@d110 1
a110 1
# passwd.PrintOnly	boolean	Deny non-printable characters in passwords
@


1.4
log
@Update and reformat
@
text
@d94 2
d97 8
a104 2
# passwd.Singlecase	boolean	Allow single-case passwords
# passwd.MinPassword	number	Minimum password length
a105 2
# passwd.LengthWarn	boolean	Warn about passwords over MaxPassword length
# passwd.PrintOnly	boolean	Deny non-printable characters in passwords
a106 3
# passwd.MinCharClasses	number	Minimum number of character classes required
# passwd.DisallowedChars string	Change list of non-allowed characters
# passwd.Help 		path	Help file for passwd
d108 1
d110 3
a112 5
# passwd.History none 		Disable password history
# passwd.History file	path 	Set path to history db (flat file)
# passwd.History dbm	path 	Set path to history db (DBM database)
# passwd.History age	number	Password history age
# passwd.History depth	number	How many password to keep per user
@


1.3
log
@Add passwd.MinCharClasses and passwd.MatchWait
@
text
@d20 1
a20 2
OUTFILE="passwd.conf"
echo "Extracting $OUTFILE (with variable substitutions)"
d22 1
a22 1
$spitshell > $OUTFILE <<'!NO!SUBS!'
d26 1
a26 1
# See doc/Reference.html for details.
d82 2
a83 2
#  Directive                 Value    Description
#                            type
d85 6
a90 6
#  PasswdTolerance           number   Tolerance between old and new passwd
#                                     files
# 
#  ShadowTolerance           number   Tolerance between old and new shadow
#                                     files
#  DeferOptions              string   Option to defer to vendor programs
d92 1
a92 1
#               Directives for sub-program passwd
d94 17
a110 22
#  passwd.Dictionaries       path     Password check dictionaries location
#  passwd.MonocaseOK         boolean  Allow single-case passwords
#  passwd.MinPassword        number   Minimum password length
#  passwd.MaxPassword        number   Maximum effective password length
# 
#  passwd.PrintableOnly      boolean  Deny non-printable characters in
#                                     passwords
#  passwd.MaxRepeat          number   How many repeated characters allowed in
#                                     passwords
#  passwd.MinCharClasses     number   Minimum number of character
#				      classes required
#  passwd.DisallowedChars    string   Change the list of non-allowed
#                                     characters
#  passwd.HistoryDatabase    string   Location of password history database
#  passwd.HistoryAge         number   Password history aging control
#  passwd.HistoryDepth       number   How many password to keep per user
#  passwd.PasswordChecks     string   Choose password check functions
#  passwd.HelpFile           path     Help file for passwd function
#  passwd.Message            path     Message of the day
#  passwd.MatchTries         number   How many password match tries
#  passwd.MatchWait          number   How long to wait after unsuccessful
#				      password match
d112 1
a112 1
#               Directives for sub-program chfn
d114 2
a115 2
#  chfn.HelpFile             path     Help file for chfn
#  chfn.Message              path     Message of the day
d117 1
a117 1
#               Directives for sub-program chsh
d119 3
a121 3
#  chsh.Helpfile             path     Help file for chsh
#  chsh.Message              path     Message of the day
#  chsh.Shells               path     List of blessed shells
a122 3
# ------------------------------------------------------------------
# Start settings from "Configure"
# ------------------------------------------------------------------
d124 1
a124 8
(
case "$o_pwhFile" in
	/*)			what="" ;;
	[nN][iI][sS]|[yY][pP])	what="nis ";;
	nisplus|NIS+)		what="nisplus ";
esac
	
	$spitshell <<!GROK!THIS!
d128 1
a128 1
#passwd.Dictionaries	$privlibexp/dictionaries
a129 7
# Password history parameters
#
#passwd.HistoryDepth	$o_pwhSize
#passwd.HistoryAge	$o_pwhTime
#passwd.HistoryDataBase	$what $o_pwhDB
#
# End $RCSfile$
d132 2
a133 3
) >> $OUTFILE
chmod 644 $OUTFILE

@


1.2
log
@Rework with new stuff
@
text
@a101 1
# 
d104 2
a105 1
# 
d115 2
@


1.1
log
@Initial revision
@
text
@d20 1
a20 1
OUTFILE="npasswd_conf.proto"
d25 1
a25 1
# Example npasswd configuration file
d27 1
a27 2
# This file should NOT be used as your configuration file,
# but be used to base your configuration file on.
d31 61
a91 1
#	 There may be multiple such entries.
d93 1
a93 1
# Configuration directives for 'passwd'
d95 20
a114 3
# passwd.Dictionaries	/path/to/dirs
#		Specify the directory in which the check dictionaries
#		are localed.
d116 1
a116 2
# passwd.MonocaseOK	yes | [no]
#		Approve single-case passwords
d118 2
a119 2
# passwd.MinPassword	N [5]
#		Minimum password length (chars)
d121 1
a121 2
# passwd.MaxPassword	N [8]
#		Maximum effective password length (for warning purposes only)
d123 4
a126 56
# passwd.PrintableOnly	yes | [no]
#		Deny non-printable characters in passwords
#
# passwd.MaxRepeat	N
#		XXXX
#
# passwd.DisallowedChars	"<string>"
#		Replace the list of characters not allowed in passwords
# passwd.DisallowedChars	+"<string>"
#		Append to the list of characters not allowed in passwords
#
# passwd.HistoryDatabase
#		/path/to/history/file |	nis mapname | nisplus table
#			Set location of password history file
#
# passwd.HistoryParams
#		keep=N		Retain the last N passwords per user
#		age=N		Retain passwords which are less than N days old
#
# passwd.PasswordChecks	function function ...
#		Specify the order of password checks.
#		The available check functions are:
#			lexical		Simple lexical checks
#			local		Local admin checks (shipped empty)
#			passwd		Check against passwd entry
#			crack		Check using Crack algorithims
#			history		Check password history
#
# passwd.MatchTries	N
#		How many chances to give users to match password
#
# passwd.HelpFile	/path/to/help/file
#		Specify the passwd help file
#
# passwd.Message	/path/to/message/file
#		Specify the passwd message-of-the-day file
#
# Configuration directives for 'chsh'
#
# chsh.HelpFile	/path/to/help/file
#		Specify the chsh help file
#
# chsh.Message	/path/to/message/file
#		Specify the chsh message-of-the-day file
#
# chsh.ShellList	/etc/shells
#		The list of blessed shells
#
# Configuration directives for 'chfn'
#
# chfn.HelpFile	/path/to/help/file
#		Specify the chfn help file
#
# chfn.Message	/path/to/message/file
#		Specify the chfn message-of-the-day file
#
a129 1
#
d142 1
a142 1
passwd.Dictionaries	$privlibexp/dictionaries
d146 3
a148 1
passwd.HistoryParams	keep=$o_pwhSize age=$o_pwhTime
d150 1
a150 4
# Password history database
#
passwd.HistoryDataBase	$what $o_pwhFile

@
