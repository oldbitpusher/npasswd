?RCS:
?RCS: @(#)p_rpcsvc.U	1.5 07/01/98
?RCS:
?RCS: Unit 'p_rpcsvc' - find RPC services library
?RCS:
?MAKE:p_xdr_passwd p_xdr_uid_t p_xencrypt p_rpclib: \
	Loc test libpth Csym cc rm libs p_secure_rpc
?MAKE:	-pick add $@ %<
?LINT:set p_xdr_passwd p_xdr_uid_t p_xencrypt p_rpclib
?S:p_xdr_passwd:
?S:    This variable is set if the xdr_passwd routine is found
?S:.
?S:p_xdr_uid_t:
?S:    This variable is set if the xdr_uid_t routine is found
?S:.
?S:p_xencrypt:
?S:    This variable is set if the xencrypt routine is found
?S:.
?S:p_rpclib:
?S:	This variable holds -lrpcsvc or the path to a rpcsvc.a archive if
?S:	the xdr_passwd() function is not defined in the standard C library.
?S:.
?C:HAS_XDR_PASSWD:
?C:	This symbol, if defined, indicates that the xdr_passwd routine exists
?C:.
?C:HAS_XDR_UID:
?C:	This symbol, if defined, indicates that the xdr_uid_t routine exists
?C:.
?C:HAS_XENCRYPT:
?C:	This symbol, if defined, indicates that the xencrypt routine exists
?C:.
?H:#$p_xdr_passwd HAS_XDR_PASSWD		/**/
?H:#$p_xdr_uid_t HAS_XDR_UID_T			/**/
?H:#$p_xencrypt HAS_XENCRYPT			/**/
?H:.
?F:pwxdr pwxdr.c
?T:val
?LINT:set p_xdr_passwd p_xdr_uid_t p_xencrypt p_rpclib
: 
echo " "
p_rpclib=`./loc librpcsvc$_a "" $libpth`
if $test -n "$p_rpclib"; then
	echo 'Found -lrpcsvc.' >&4
	p_rpclib="-lrpcsvc"
fi
if $test -z "$p_rpclib"; then
	p_rpclib=`./loc librpcsvc.$so "" $libpth`
	if $test -n "$p_rpclib"; then
		echo 'Found -lrpcsvc (shared).' >&4
		p_rpclib="-lrpcsvc"
	fi
fi
if $test -z "$p_rpclib"; then
	p_rpclib=`./loc librpcsvc.$so.[0-9]'*' "" $libpth`
	if $test -n "$p_rpclib"; then
		echo 'Found -lrpcsvc (shared).' >&4
		p_rpclib="-lrpcsvc"
	fi
fi

p_xdr_passwd=''
:
: Look for xdr_passwd in libc
:
if set xdr_passwd val -f p_xdr_passwd; eval "$csym"; $val; then
	echo 'xdr_passwd() found.' >&4
	p_xdr_passwd="$define"
	p_rpclib=''
fi
if $test -z "$p_xdr_passwd"; then
	:
	: Look in librpcsvc
	:
	echo 'extern int xdr_passwd(); main(){int (*f)()=xdr_passwd;exit(0);}' > pwxdr.c
	if $cc pwxdr.c -o pwxdr $p_rpclib $libs >/dev/null 2>&1; then
		p_xdr_passwd="$define"
		echo 'xdr_passwd() found.' >&4
	fi
fi

if $test -z "$p_xdr_passwd"; then
	echo 'xdr_passwd() not found - will use internal version.' >&4
	p_xdr_passwd="$undef"
	:
	: Look for xdr_uid_t in librpcsvc
	:
	p_xdr_uid="$undef"
	echo 'extern int xdr_uid_t(); main(){int (*f)()=xdr_uid_t;exit(0);}' > pwxdr.c
	if $cc pwxdr.c -o pwxdr $p_rpclib $libs >/dev/null 2>&1; then
		p_xdr_uid="$define"
		echo 'xdr_uid_t() found.' >&4
	fi
fi
: Add the RPC library to 'libs' if needed
$test -n "$p_rpclib" && libs="$libs $p_rpclib"

:
: Now look for the xencrypt routine
:
p_xencrypt="$undef"
if $test "$p_secure_rpc" = "$define"; then
	echo 'This system supports Secure RPC - looking for xencrypt()' >&4
	if set xencrypt val -f p_xencrypt; eval "$csym"; $val; then
		echo 'xencrypt() found.' >&4
		p_xencrypt="$define"
	else
		echo 'extern int xencrypt(); main(){printf("%d",xencrypt);exit(0);}' > pwxdr.c
		if $cc pwxdr.c -o pwxdr $p_rpclib $libs >/dev/null 2>&1; then
			echo 'xencrypt() found.' >&4
			p_xencrypt="$define"
		else
			cat <<EOF >&4
xencrypt() not found.

*****
*****	The SunOS encryption kit is not installed.
*****	Secure RPC support is being disabled.
*****
*****	Re-run Configure after installing the encryption kit to
*****	enable Secure RPC support.
*****
EOF
			p_secure_rpc="$undef"
		fi
	fi
fi
if $test "$p_nisplus" = "$define"; then
	echo '' >&4
	echo 'This system supports NIS+ - looking for xencrypt()' >&4
	if set xencrypt val -f p_xencrypt; eval "$csym"; $val; then
		p_xencrypt="$define"
	else
		cat <<EOF >&4
*****
*****	xencrypt() not found in libnsl
*****
*****	It is not possible to update NIS+ credentials without
*****	this routine.  Complain to Sun about taking this routine
*****	out of libnsl in Solaris 2.5 and not providing a replacement API.
*****
*****	Re-run Configure and disable NIS+ support.
*****	Aborting.
*****
EOF
		exit 1
	fi
fi

$rm -f pwxdr pwxdr.c

