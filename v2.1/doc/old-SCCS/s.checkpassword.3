h04149
s 00020/00003/00316
d D 1.11 98/10/15 14:39:38 clyde 11 10
c Add '@' syntax for history database path
e
s 00004/00002/00315
d D 1.10 98/10/14 09:41:35 clyde 10 9
c Update history depth info
e
s 00001/00001/00316
d D 1.9 98/09/16 14:41:59 clyde 9 8
c Change PrintOnly to PrintableOnly
e
s 00006/00000/00311
d D 1.8 98/08/17 13:25:59 clyde 8 7
c Add reference to WhiteSpace directive
e
s 00008/00008/00303
d D 1.7 98/07/20 16:12:45 clyde 7 6
c Spell check
e
s 00011/00003/00300
d D 1.6 98/07/20 15:16:38 clyde 6 5
c 1. Fix debug directive explain
c 2. Add BUGS section about history database access
e
s 00001/00001/00302
d D 1.5 98/07/16 09:13:38 clyde 5 4
c Update path tokens
e
s 00032/00007/00271
d D 1.4 98/07/09 15:27:08 clyde 4 3
c Add more intro, trace level routines
e
s 00001/00001/00277
d D 1.3 98/07/08 17:41:17 clyde 3 2
c  Use path tokens
e
s 00005/00000/00273
d D 1.2 98/07/02 16:54:47 clyde 2 1
c Add debug to config directive list
e
s 00273/00000/00000
d D 1.1 98/06/29 16:23:26 clyde 1 0
c date and time created 98/06/29 16:23:26 by clyde
e
u
U
f e 0
t
T
I 1
'\"
'\"	%W% %G% (cc.utexas.edu)
'\"
.TH checkpassword 3
.SH NAME
D 4
checkpassword, configure_checkpassword, init_checkpassword \- 
sanity check password 
E 4
I 4
checkpassword, configure_checkpassword, init_checkpassword checkpassword_verify \- 
password sanity checking
E 4
.sp
password_history_update \- update password history database
I 4
.sp
init_debug, set_debug_tag \- password check library tracing
E 4
.SH SYNOPSIS
.br
D 4
#include "checkpassword.h"
E 4
I 4
#include\ "checkpassword.h"
E 4
.sp
D 3
cc\ ...\ -L\fInpasswd-lib\fP\ -lpwcheck.a
E 3
I 3
D 4
cc\ ...\ -L@NPASSWD-LIB@ \ -lpwcheck.a
E 4
I 4
D 5
cc\ ...\ -I@NPASSWD-LIB@ -L@NPASSWD-LIB@ \ -lcheckpassword\ ...\ -lother-libs
E 5
I 5
cc\ ...\ -I@NPASSWD-HOME@ -L@NPASSWD-HOME@ \ -lcheckpassword\ ...\ -lother-libs
E 5
E 4
E 3
.sp
char\ *checkpassword(char\ *password,\ struct\ passwd\ *user);
.sp
D 4
char\ *checkpassword_configure(char\ *command,\ int flagerror);
E 4
I 4
char\ *checkpassword_configure(char\ *command,\ int\ flagerror);
E 4
.sp
I 4
char\ *checkpassword_verify();
.sp
E 4
void\ init_checkpassword();
.sp
D 4
int\ password_history_update(char\ *user,\ char\ *cryptpass,\ time_t epoch);
E 4
I 4
int\ password_history_update(char\ *user,\ char\ *cryptpass,\ time_t\ epoch);
E 4
.sp
I 4
void\ init_debug(int\ level);
.sp
void\ set_debug_tag(char\ *tag);
E 4
.SH DESCRIPTION
.PP
I 4
The password check library is designed for applications
which changes passwords.  This password check engine is at the core of 
.IR npasswd .
.PP
E 4
The \fBcheckpassword()\fP routine
determines whether a password is suitable for use.
The
.I password
D 7
argument is the plaintext candidate password,
E 7
I 7
argument is the plain-text candidate password,
E 7
.I user
is a pointer to a passwd structure from
.IR getpwent (3),
.IR getpwnam (3),
or
.IR getpwuid (3).
D 7
This routine returns an explainatory message if the password is not
E 7
I 7
This routine returns an explanatory message if the password is not
E 7
acceptable, and NULL otherwise.
.PP
The \fBcheckpassword_configure()\fP routine
sets the password check parameters.
The argument
.I command
is a string containing a configuration directive.
If the
.I flagerror
argument is non-zero, unrecognized directives will be considered errors.
.PP
This routine returns NULL if
.I command
was recognized and accepted, and an error message otherwise.
.PP
The configuration directives are a subset of those for
.BR npasswd .
.PP
The \fBinit_checkpassword()\fP routine
performs initialization for the password check routines.
It is implicitly run on the first invocation of 
.BR checkpassword() .
Each call resets resets the password check parameters to defaults.
.PP
I 4
The \fBcheckpassword_verify()\fP routine sanity checks the configuration
of the password check routines. 
It returns NULL if the configuration is correct, or else an error message.
This routine should be called after the last
use of \fBinit_checkpassword()\fP or \fBcheckpassword_configure()\fP.
.PP
E 4
The \fBpassword_history_update()\fP routine inserts a password into the
history database.  The 
.I user
argument is the user name,
D 7
.I cryptpass
is the encrytped password to enter,
E 7
I 7
.I crypt-pass
is the encrypted password to enter,
E 7
and 
.I epoch
D 7
is the timestamp to put on the password.  If this argument is 0,
E 7
I 7
is the time stamp to put on the password.  If this argument is 0,
E 7
the current time is used.
.PP
The use of this routine requires that the history database exists
D 7
and the user has privleges to write to it.  This usually means an
E 7
I 7
and the user has privileges to write to it.  This usually means an
E 7
effective uid of root.
.PP
This routine returns 0 if there is no history database, 1 upon success, and
-1 for failure.
.PP
If Digital UNIX enhanced security mode is active,
.B password_history_update()
is a no-op.
.PP
See manual page for
.IR history_admin (1)
about managing the password history database.
.SH INTERNALS
.PP
.B Checkpassword
subjects password candidates to a series of guessability
tests. The password is accepted only if it passes all of them.
.PP
The tests which are used and the order of their application can be
customized by configuration directives.
Some the following tests are mandatory, others optional:
.IP "History (optional)"
Password history discourages too frequent password reuse.
Password candidates are compared to the passwords in the history record
for the user and rejected if found. 
.sp
The password history database location and storage method can be
specified in the configuration file.
.PP
If Digital UNIX (OSF/1) enhanced security mode is active,
that history mechanism will be used.
.PP
.IP "Lexical (mandatory)"
These tests include:
.RS
.IP \(bu
Enforcing a minimum length of six characters.
.IP \(bu
Checking for non-printable or forbidden characters. 
Default is to allow non-printable and whitespace characters except
common tty control characters.
.IP \(bu
Denying excessive adjacent repeated characters.
.IP \(bu
Encouraging a diversity of character classes (mixed case, numbers, punctuation).
.IP \(bu
Looking for easily guessed patterns (U.S. Social Security, telephone numbers).
.IP \(bu
Passwords that do not have upper and lower case alphabetics may be rejected,
depending on the check parameters.
.RE
.PP
.IP "Local (optional)"
The password is checked against various information.
host name.
.IP "Passwd (mandatory)"
The password is compared to a number of permutations of the
information in the
.I user
argument.
.IP "Dictionary (mandatory)"
The password is subjected to a series of tests from the \fICrack\fP
password guessing program.  
The candidate is rejected if it can be derived from any word in the 
.B npasswd
password check dictionaries.
D 4

E 4
I 4
.PP
The password check library has extensive internal tracing.  The following
routines configure that facility.
.PP
The \fBset_debug_tag()\fP routine sets the trace message identifier.
.PP
The \fBinit_debug()\fP routine sets the trace level.  Refer to
.I checkpassword.h
for trace level defines.
E 4
.SH CONFIGURATION
.PP
The configuration directives are:
.TP
.BI AlphaOnly " yes | no"
Allow alpha-only passwords.  The default is to 
.B disallow
alpha-only passwords.
.TP
.BI CharClasses " N"
Require at least
.I N
character classes in passwords.
The character classes are:
.RS
.IP \(bu
Upper case alpha.
.IP \(bu
Lower case alpha.
.IP \(bu
Digits.
.IP \(bu
Whitespace.
.IP \(bu
Punctuation.
.IP \(bu
Control characters.
.RE
The higher the class requirement, the more diverse mixture of characters
required.
.TP
I 2
.BI Debug " N"
D 6
Sets internal debug level to \fIN\fP, which must be a digit [0-9].  See
.IR checkpassword (1)
for available debugging levels.
E 6
I 6
Sets internal debug level to \fIN\fP, which must be a digit [0-9].  Refer
to the sources for debug levels.
E 6
.TP
E 2
.BI Dictionaries " path ... path"
Adds directories to the dictionary search list.  Each directory in the path
is scanned for hashed dictionary files.
Multiple directories can be specified in one directive, and
multiple directives can be given.
The hash files are built with 
.BI makedict (1).
.TP
.BI DisallowedChars " [+]string"
Sets the list of characters (usually non-printable) not allowed.
C backslash sequences (e.g. \\b or \\007) may be used.
.I String
may be enclosed in double quotes.  If the initial character of
.I string
is a plus-sign, then the it is
.B appended
to the forbidden character list.
.sp
The default disallowed character list contains typical UNIX
terminal special characters.
.TP
.BI History " args"
Configure the password history mechanism.
.RS
.TP
.BI age " N"
When a password history record is fetched or updated, any passwords older than
.I N
days are discarded. The depth limit (see below) is also enforced. 
The default age is 180 days.
.TP
.BI depth " N"
D 10
When a password history record is fetched or updated, all but the most recent
E 10
I 10
When a password history record is fetched or updated, all but the
E 10
.I N
I 10
most recent 
.B old
E 10
passwords are discarded.  The age limit (see above) is also enforced.
D 10
The default is to retain the last 5 passwords.
E 10
I 10
The default is to retain the last 2 passwords.
E 10
.TP
.BI dbm " path"
Use
.I path
D 11
as the history database in DBM format. This is the default if the NDBM
library routines are available.  The default history database is 
.BR npasswd-lib/ history.
E 11
I 11
as the history database in DBM format. 
If
.I path
is specified as
.BR "@" ,
then the default database is used.
E 11
.TP
.BI file " path"
Use
.I path
as the history database in "flat file" format.
I 11
If
.I path
is specified as
.BR "@" ,
the default database is used.
E 11
.TP
.B none
Disable password history.
I 11
.PP
The preferred history database method is DBM, and is the
default if the NDBM library is available.
.PP
The @ syntax is useful to override the default method but use the default
database.
.PP
The default history database is 
.BR @NPASSWD-HIST@ .
E 11
.RE
.TP
.BI LengthWarn " yes | no"
Warn if the password is longer than the effective length.  This does not
affect the security of the password, but such a warning may be desirable
from a human-interface perspective.  The default is to not issue a warning.
.TP 
.BI MaxPassword " N"
Sets the maximum effective password length to \fIN\fP characters.
D 7
The default is platform dependant, but is usually 8.
E 7
I 7
The default is platform dependent, but is usually 8.
E 7
.TP
.BI MaxRepeat " N"
Set allowed adjacent repeated character count to \fIN\fP.
The default is 3.
.TP
.BI MinPassword " N"
Sets the minimum acceptable length for a password to \fIN\fP characters.
The default minimum length is 6 characters.
.TP
.BI PasswordChecks " proc proc ... proc"
Selects the order of the password checks.  Use the check names listed above.
The default check order is \fBlexical\ passwd\ local\ history\ dictionary\fB.
.TP
D 9
.BI PrintOnly " yes | no"
E 9
I 9
.BI PrintableOnly " yes | no"
E 9
Limit passwords to having only printable characters.  The
.IR isprint (3)
routine is used to determine this.
The default is to allow all non-printable characters except the disallowed
characters.
Use of control characters may cause problems on some systems.
.TP
.BI SingleCase " yes | no"
Allow single-case (all lower case or all upper case) passwords.
The default is to allow single-case passwords.
I 8
.TP
.BI WhiteSpace " yes | no"
Allow whitespace characters in passwords.  The
.IR isspace (3)
routine is used to determine this.
The default is to allow whitespace characters.
E 8
.PP
I 6
.SH BUGS
.PP
The 
.B npasswd
history  database  is  protected  from general access.  Any application
D 7
using this library will need to run with privleges in order to perform
E 7
I 7
using this library will need to run with privileges in order to perform
E 7
the password history check.  On Digital UNIX systems, membership in group
.I auth
is needed to read the authorization files.
E 6
.SH SEE ALSO
npasswd(1),
checkpassword(1)
.SH AUTHOR
Clyde Hoover
.br
Academic Computing Services and Instructional Technology Services
.br
The University of Texas at Austin
.br
c.hoover@cc.utexas.edu
.br
\(co 1998, The University of Texas at Austin. All rights reserved. 
'\"
'\" End %M%
E 1
